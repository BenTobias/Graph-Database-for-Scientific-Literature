// Generated by CoffeeScript 1.6.3
var exports, mongraphMongoosePlugin, _;

_ = require('underscore');

module.exports = exports = mongraphMongoosePlugin = function(schema, options) {
  var schemaOptions, _base, _base1, _base2, _base3, _base4, _base5, _base6, _base7;
  if (options == null) {
    options = {};
  }
  schemaOptions = schema.options;
  if (schemaOptions.graphability === false) {
    return null;
  }
  if (schemaOptions.graphability == null) {
    schemaOptions.graphability = {};
  }
  if ((_base = schemaOptions.graphability).schema == null) {
    _base.schema = true;
  }
  if ((_base1 = schemaOptions.graphability).middleware == null) {
    _base1.middleware = true;
  }
  if (schemaOptions.graphability.middleware && typeof schemaOptions.graphability.middleware !== 'object') {
    schemaOptions.graphability.middleware = {};
  }
  if ((_base2 = schemaOptions.graphability.middleware).preRemove == null) {
    _base2.preRemove = true;
  }
  if ((_base3 = schemaOptions.graphability.middleware).preSave == null) {
    _base3.preSave = true;
  }
  if ((_base4 = schemaOptions.graphability.middleware).postInit == null) {
    _base4.postInit = true;
  }
  if ((_base5 = schemaOptions.graphability).relationships == null) {
    _base5.relationships = {};
  }
  if ((_base6 = schemaOptions.graphability.relationships).removeAllOutgoing == null) {
    _base6.removeAllOutgoing = true;
  }
  if ((_base7 = schemaOptions.graphability.relationships).removeAllIncoming == null) {
    _base7.removeAllIncoming = true;
  }
  if (schemaOptions.graphability.schema) {
    schema.add({
      _node_id: Number
    }, schema.add({
      _relationships: {}
    }));
  }
  if (schemaOptions.graphability.middleware.preRemove) {
    schema.pre('remove', function(next) {
      var opts;
      if (!(this._node_id > 0)) {
        return next(null);
      }
      opts = {
        includeRelationships: schemaOptions.graphability.relationships.removeAllOutgoing && schemaOptions.graphability.relationships.removeAllOutgoing
      };
      return this.removeNode(opts, next);
    });
  }
  if (schemaOptions.graphability.middleware.preSave) {
    return schema.pre('save', true, function(next, done) {
      var doc;
      doc = this;
      next();
      return doc.getNode({
        forceCreation: true
      }, function(err, node) {
        var dataForNode, index, path;
        dataForNode = doc.dataForNode();
        index = doc.dataForNode({
          index: true
        });
        doc.indexGraph({
          node: node
        }, function() {});
        if (dataForNode) {
          node.data = _.extend(node.data, dataForNode);
          for (path in dataForNode) {
            if (typeof dataForNode[path] === 'undefined') {
              delete node.data[path];
            }
          }
          node.save(function() {});
        }
        return done(err, node);
      });
    });
  }
};

/*
//@ sourceMappingURL=mongraphMongoosePlugin.map
*/
