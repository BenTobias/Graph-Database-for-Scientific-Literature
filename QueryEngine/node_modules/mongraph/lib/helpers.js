var _ = require('underscore');

var constructorNameOf = function(f) {
  if ( (typeof f !== 'undefined') && (f.constructor) ) {
    var s = f.constructor.toString().match(/function\s+(.+?)\(/);
    if (s[1])
      return s[1].trim();
  }
  // else
  return null;
}

var sortStringAndOptionsArguments = function(string, options) {
  if (typeof string === 'object') {
    return { string: null, options: string };
  }
  return {
    string: string || null,
    options: options || {}
  }
}

var sortOptionsAndCallbackArguments = function(options, callback) {
  if (typeof options === 'function') {
    return { options: {}, callback: options };
  }
  return {
    options: options || {},
    callback: callback
  }
}

var sortStringAndCallbackArguments = function(string, callback) {
  if (typeof string === 'function') {
    callback = string;
    string = null;
  }
  return {
    callback: callback,
    string: string
  }
}

var extractCollectionAndId = function(s) {
  var parts = s.split(":");
  if (parts.length > 1)
    return {
      collectionName: parts[0],
      _id: parts[1]
    };
  else
    return null;
}

var getObjectIDAsString = function(obj) {
  if (typeof obj === 'string')
    return obj;
  else if (typeof obj === 'object')
    return String(obj._id) || obj;
  else
    return '';
}

var getModelByCollectionName = function(collectionName, mongooseHandler) {
  var models = null;
  var name = null;
  var nameOfModel = null;
  var i = 0;
  if (constructorNameOf(mongooseHandler) === 'Mongoose')
    models = mongooseHandler.models;
  else 
    throw Error('You need to pass a mongoose handler as 2nd argument');
  _.each(models, function(model, nameOfModel){
    // iterate through models and find the corresponding collection and modelname
    if (collectionName === models[nameOfModel].collection.name)
      name = models[nameOfModel];
  });
  return name;
}

var getModelNameByCollectionName = function(collectionName, mongooseHandler) {
  var model = getModelByCollectionName(collectionName, mongooseHandler);
  return (model) ? model.modelName : null;
}

var getCollectionByCollectionName = function(collectionName, mongooseHandler) {
  var modelName = getModelNameByCollectionName(collectionName, mongooseHandler);
  return mongooseHandler.models[modelName] || (mongooseHandler.connections[0]) ? mongooseHandler.connections[0].collection(collectionName) : mongooseHandler.collection(collectionName);
}

exports = module.exports = {
  sortStringAndOptionsArguments: sortStringAndOptionsArguments,
  sortOptionsAndCallbackArguments: sortOptionsAndCallbackArguments,
  sortStringAndCallbackArguments: sortStringAndCallbackArguments,
  getCollectionByCollectionName: getCollectionByCollectionName,
  getModelNameByCollectionName: getModelNameByCollectionName,
  getModelByCollectionName: getModelByCollectionName,
  extractCollectionAndId: extractCollectionAndId
};